Обработка задач на сервере
Запущенный скрипт clearml_task_bot_server.py раз в 5 секунд проверяет состояние задач и очередей с именами queue_for_gpu_mount_{колво gpu} на сервере. 
При добавлении задачи в одну из отслеживаемых очередей, чтобы не нарушалась очередность запуска, сервер заносит ее в свою очередь, находящуюся внутри сервера.

Как только на кластере становится достаточно свободных видеокарт, сервер запускает задачу, происходит это следующим образом:
Так как агенты, привязанные к очереди запускают задачу автоматически, мы не можем контролировать очередность запуска задач из разных очередей queue_for_gpu_mount_*
Это означает, что если приставить агентов к очередям, то из-за автоматического запуска, они могут начать выполнять следующую задачу, находящуюся в очереди queue_for_gpu_mount_* тогда, когда в очереди на сервере данная задача стоит не первой в списке
Для решения данной проблемы, агенты не привязываются к очередям queue_for_gpu_mount_*. При запуске выполнения очередной задачи, создается буферная очередь под названием buf_queue_for_task_{id задачи}.
Агент привязывается к буферной очереди и как только он забирает задачу из буферной очереди на исполнение, очередь уничтожается.
Таким образом созданный агент будет привязан не к очереди, в которой могут находится несколько задач, которые отработавший агент может запустить без нашего запроса, а к самой задаче и уничтожится он сразу после того как выполнит ее.
Буферные очереди не должны использоваться пользователями, однако ничего страшного не случится, так как если пользователь случайно добавит задачу в буферную очередь, агент уничтожится после выполнения целевой задачи, и задача, котора была добавлена случайно умрет вместе с агентом.

CI/CD
1. Установить gitlab-runner:
# Download the binary for your system
sudo curl -L --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64

# Give it permission to execute
sudo chmod +x /usr/local/bin/gitlab-runner

# Create a GitLab Runner user
sudo useradd --comment 'GitLab Runner' --create-home gitlab-runner --shell /bin/bash

# Install and run as a service
sudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner
sudo gitlab-runner start

# Здесь вместо вместо $REGISTRATION_TOKEN вставить свой токен, найти его можно, зайдя в свой проект на гитлабе и перейдя в settings->ci/cd->runners
sudo gitlab-runner register --url http://10.24.65.46:999/ --registration-token $REGISTRATION_TOKEN

Указать shell при настройке, в тегах прописать clearml, ubuntu
Позже можно будет попробовать собрать контейнер, закинув туда все необходимое.


2. Все содержимое скопировать в корень проекта на гитлабе, (позже напишу какой-нибудь скрипт, который это все устанавливать будет).
3. В clearml/task_config.json находятся параметры запуска задачи на сервере:
"project_name": "gitlab_test",
"experiment_name": "gitlab_experiment", - понятно
"branch": "master", - ветка, которую скопирует clearml
"script": "./scripts/AntsBees.py",  - скрипт, который clearml запустит на сервере относительно корня репозитория 
"gpu_count": "3",                   - кол-во видеокарт
"docker_image": "python:3.10",      - образ контейнера, в котором будет запускаться задача
"additional_script_args": ""        - аргументы, с которыми запуститься скрипт
"docker_args": "",                  - параметры для докер-контейнера, записываются просто строкой
"docker_bash_setup_script": "",     - команда, с которой стартует контенер, не обязательна и пока не желательна...
"requirements_file": "" - путь до файла requirements.txt относительно корня репозитория

4. После этого можно запушить что-нибудь в master ветку, должна произойти магия(но это не точно)
5. Магию смотреть в разделе CI/CD->pipelines

